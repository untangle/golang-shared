// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package CaptivePortal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CaptivePortalGrpcServiceClient is the client API for CaptivePortalGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptivePortalGrpcServiceClient interface {
	GetCaptivePortalUser(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetResponse, error)
	SetCaptivePortalUser(ctx context.Context, in *UserSetRequest, opts ...grpc.CallOption) (*UserSetResponse, error)
}

type captivePortalGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptivePortalGrpcServiceClient(cc grpc.ClientConnInterface) CaptivePortalGrpcServiceClient {
	return &captivePortalGrpcServiceClient{cc}
}

func (c *captivePortalGrpcServiceClient) GetCaptivePortalUser(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetResponse, error) {
	out := new(UserGetResponse)
	err := c.cc.Invoke(ctx, "/captiveportal.CaptivePortalGrpcService/getCaptivePortalUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captivePortalGrpcServiceClient) SetCaptivePortalUser(ctx context.Context, in *UserSetRequest, opts ...grpc.CallOption) (*UserSetResponse, error) {
	out := new(UserSetResponse)
	err := c.cc.Invoke(ctx, "/captiveportal.CaptivePortalGrpcService/setCaptivePortalUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptivePortalGrpcServiceServer is the server API for CaptivePortalGrpcService service.
// All implementations should embed UnimplementedCaptivePortalGrpcServiceServer
// for forward compatibility
type CaptivePortalGrpcServiceServer interface {
	GetCaptivePortalUser(context.Context, *UserGetRequest) (*UserGetResponse, error)
	SetCaptivePortalUser(context.Context, *UserSetRequest) (*UserSetResponse, error)
}

// UnimplementedCaptivePortalGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCaptivePortalGrpcServiceServer struct {
}

func (UnimplementedCaptivePortalGrpcServiceServer) GetCaptivePortalUser(context.Context, *UserGetRequest) (*UserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptivePortalUser not implemented")
}
func (UnimplementedCaptivePortalGrpcServiceServer) SetCaptivePortalUser(context.Context, *UserSetRequest) (*UserSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCaptivePortalUser not implemented")
}

// UnsafeCaptivePortalGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptivePortalGrpcServiceServer will
// result in compilation errors.
type UnsafeCaptivePortalGrpcServiceServer interface {
	mustEmbedUnimplementedCaptivePortalGrpcServiceServer()
}

func RegisterCaptivePortalGrpcServiceServer(s grpc.ServiceRegistrar, srv CaptivePortalGrpcServiceServer) {
	s.RegisterService(&_CaptivePortalGrpcService_serviceDesc, srv)
}

func _CaptivePortalGrpcService_GetCaptivePortalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptivePortalGrpcServiceServer).GetCaptivePortalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captiveportal.CaptivePortalGrpcService/getCaptivePortalUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptivePortalGrpcServiceServer).GetCaptivePortalUser(ctx, req.(*UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptivePortalGrpcService_SetCaptivePortalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptivePortalGrpcServiceServer).SetCaptivePortalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captiveportal.CaptivePortalGrpcService/setCaptivePortalUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptivePortalGrpcServiceServer).SetCaptivePortalUser(ctx, req.(*UserSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CaptivePortalGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "captiveportal.CaptivePortalGrpcService",
	HandlerType: (*CaptivePortalGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCaptivePortalUser",
			Handler:    _CaptivePortalGrpcService_GetCaptivePortalUser_Handler,
		},
		{
			MethodName: "setCaptivePortalUser",
			Handler:    _CaptivePortalGrpcService_SetCaptivePortalUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Captiveportal.proto",
}
