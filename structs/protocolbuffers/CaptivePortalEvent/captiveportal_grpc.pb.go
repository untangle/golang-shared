// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: captiveportal.proto

package CaptivePortalEvent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaptiveUserEvent_GetCaptivePortalUser_FullMethodName = "/captiveportalevent.CaptiveUserEvent/getCaptivePortalUser"
	CaptiveUserEvent_SetCaptivePortalUser_FullMethodName = "/captiveportalevent.CaptiveUserEvent/setCaptivePortalUser"
)

// CaptiveUserEventClient is the client API for CaptiveUserEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptiveUserEventClient interface {
	GetCaptivePortalUser(ctx context.Context, in *UserEventRequest, opts ...grpc.CallOption) (*UserEventResponse, error)
	SetCaptivePortalUser(ctx context.Context, in *UserAcceptTime, opts ...grpc.CallOption) (*UserAcceptTimeResponse, error)
}

type captiveUserEventClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptiveUserEventClient(cc grpc.ClientConnInterface) CaptiveUserEventClient {
	return &captiveUserEventClient{cc}
}

func (c *captiveUserEventClient) GetCaptivePortalUser(ctx context.Context, in *UserEventRequest, opts ...grpc.CallOption) (*UserEventResponse, error) {
	out := new(UserEventResponse)
	err := c.cc.Invoke(ctx, CaptiveUserEvent_GetCaptivePortalUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captiveUserEventClient) SetCaptivePortalUser(ctx context.Context, in *UserAcceptTime, opts ...grpc.CallOption) (*UserAcceptTimeResponse, error) {
	out := new(UserAcceptTimeResponse)
	err := c.cc.Invoke(ctx, CaptiveUserEvent_SetCaptivePortalUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptiveUserEventServer is the server API for CaptiveUserEvent service.
// All implementations must embed UnimplementedCaptiveUserEventServer
// for forward compatibility
type CaptiveUserEventServer interface {
	GetCaptivePortalUser(context.Context, *UserEventRequest) (*UserEventResponse, error)
	SetCaptivePortalUser(context.Context, *UserAcceptTime) (*UserAcceptTimeResponse, error)
	mustEmbedUnimplementedCaptiveUserEventServer()
}

// UnimplementedCaptiveUserEventServer must be embedded to have forward compatible implementations.
type UnimplementedCaptiveUserEventServer struct {
}

func (UnimplementedCaptiveUserEventServer) GetCaptivePortalUser(context.Context, *UserEventRequest) (*UserEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptivePortalUser not implemented")
}
func (UnimplementedCaptiveUserEventServer) SetCaptivePortalUser(context.Context, *UserAcceptTime) (*UserAcceptTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCaptivePortalUser not implemented")
}
func (UnimplementedCaptiveUserEventServer) mustEmbedUnimplementedCaptiveUserEventServer() {}

// UnsafeCaptiveUserEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptiveUserEventServer will
// result in compilation errors.
type UnsafeCaptiveUserEventServer interface {
	mustEmbedUnimplementedCaptiveUserEventServer()
}

func RegisterCaptiveUserEventServer(s grpc.ServiceRegistrar, srv CaptiveUserEventServer) {
	s.RegisterService(&CaptiveUserEvent_ServiceDesc, srv)
}

func _CaptiveUserEvent_GetCaptivePortalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptiveUserEventServer).GetCaptivePortalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptiveUserEvent_GetCaptivePortalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptiveUserEventServer).GetCaptivePortalUser(ctx, req.(*UserEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptiveUserEvent_SetCaptivePortalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAcceptTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptiveUserEventServer).SetCaptivePortalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptiveUserEvent_SetCaptivePortalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptiveUserEventServer).SetCaptivePortalUser(ctx, req.(*UserAcceptTime))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptiveUserEvent_ServiceDesc is the grpc.ServiceDesc for CaptiveUserEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptiveUserEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captiveportalevent.CaptiveUserEvent",
	HandlerType: (*CaptiveUserEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCaptivePortalUser",
			Handler:    _CaptiveUserEvent_GetCaptivePortalUser_Handler,
		},
		{
			MethodName: "setCaptivePortalUser",
			Handler:    _CaptiveUserEvent_SetCaptivePortalUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "captiveportal.proto",
}
