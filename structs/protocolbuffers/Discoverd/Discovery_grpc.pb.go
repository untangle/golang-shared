// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: Discovery.proto

package Discoverd

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisoverydClient is the client API for Disoveryd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisoverydClient interface {
	RequestAllEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RequestResponse, error)
	ScanNet(ctx context.Context, in *ScanNetRequest, opts ...grpc.CallOption) (*RequestResponse, error)
	ScanHost(ctx context.Context, in *ScanHostRequest, opts ...grpc.CallOption) (*RequestResponse, error)
}

type disoverydClient struct {
	cc grpc.ClientConnInterface
}

func NewDisoverydClient(cc grpc.ClientConnInterface) DisoverydClient {
	return &disoverydClient{cc}
}

func (c *disoverydClient) RequestAllEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/discoverd.Disoveryd/RequestAllEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disoverydClient) ScanNet(ctx context.Context, in *ScanNetRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/discoverd.Disoveryd/ScanNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disoverydClient) ScanHost(ctx context.Context, in *ScanHostRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/discoverd.Disoveryd/ScanHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisoverydServer is the server API for Disoveryd service.
// All implementations must embed UnimplementedDisoverydServer
// for forward compatibility
type DisoverydServer interface {
	RequestAllEntries(context.Context, *empty.Empty) (*RequestResponse, error)
	ScanNet(context.Context, *ScanNetRequest) (*RequestResponse, error)
	ScanHost(context.Context, *ScanHostRequest) (*RequestResponse, error)
	mustEmbedUnimplementedDisoverydServer()
}

// UnimplementedDisoverydServer must be embedded to have forward compatible implementations.
type UnimplementedDisoverydServer struct {
}

func (UnimplementedDisoverydServer) RequestAllEntries(context.Context, *empty.Empty) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAllEntries not implemented")
}
func (UnimplementedDisoverydServer) ScanNet(context.Context, *ScanNetRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNet not implemented")
}
func (UnimplementedDisoverydServer) ScanHost(context.Context, *ScanHostRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanHost not implemented")
}
func (UnimplementedDisoverydServer) mustEmbedUnimplementedDisoverydServer() {}

// UnsafeDisoverydServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisoverydServer will
// result in compilation errors.
type UnsafeDisoverydServer interface {
	mustEmbedUnimplementedDisoverydServer()
}

func RegisterDisoverydServer(s grpc.ServiceRegistrar, srv DisoverydServer) {
	s.RegisterService(&Disoveryd_ServiceDesc, srv)
}

func _Disoveryd_RequestAllEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisoverydServer).RequestAllEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverd.Disoveryd/RequestAllEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisoverydServer).RequestAllEntries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disoveryd_ScanNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisoverydServer).ScanNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverd.Disoveryd/ScanNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisoverydServer).ScanNet(ctx, req.(*ScanNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disoveryd_ScanHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisoverydServer).ScanHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverd.Disoveryd/ScanHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisoverydServer).ScanHost(ctx, req.(*ScanHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Disoveryd_ServiceDesc is the grpc.ServiceDesc for Disoveryd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disoveryd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discoverd.Disoveryd",
	HandlerType: (*DisoverydServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAllEntries",
			Handler:    _Disoveryd_RequestAllEntries_Handler,
		},
		{
			MethodName: "ScanNet",
			Handler:    _Disoveryd_ScanNet_Handler,
		},
		{
			MethodName: "ScanHost",
			Handler:    _Disoveryd_ScanHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Discovery.proto",
}
